from timetable.group import Group

import re

GROUP_REGEX=re.compile(r"^[0-9]+.[а-яА-Яa-zA-Z]+.[0-9]+")
EMPTY_GROUP_REGEX=re.compile(r"[а-яА-Яa-zA-Z]+.*[а-яА-Яa-zA-Z]+")

# Group 1: номер дисциплины.
# Group 2: время начала.
# Group 3: час начала (возможны ' ' и '\n').
# Group 4: минута начала (возможны ' ' и '\n').
NUM_TIME_REGEX=re.compile(r"(^[0-9]+)[ \n]+(([0-9 \n]+)[:]([0-9 \n]+))")

class Departament(object):
  """Класс Departament используется для описания групп какого-то отделения.

  Аттрибуты
  ---------
  name : str
    Название рассписания отделения.

  groups : list
    Группы в рассписании.

  Методы
  ------
  parse(table)
    Разбирает таблицу на свои группы.
  """
  def __init__(self, name):
    self.name=name
    self.groups=list()

  def parse(self, table, shape):
    """Разбирает таблицу на свои группы.

    Таблица
    -------

    |---|-------|-------------|-------|-----|-----|
    | / |   0   |      1      |   2   |  n  | n+1 |
    |---|-------|-------------|-------|-----|-----|
    | 0 | *     | 11БД173     | *     | ... | *   |
    |---|-------|-------------|-------|-----|-----|
    | 1 | 1     | Дисциплина1 | 404   | ... | ... |
    |   | 8:00  |             |       |     |     |
    |---|-------|-------------|-------|-----|-----|
    | 2 |       | Дисциплина2 | 202   | ... | ... |
    |   | 9:25  |             |       |     |     |
    |---|-------|-------------|-------|-----|-----|
    | 3 | 3     | Дисциплина3 | С/зал | ... | ... |
    |   |       |             |       |     |     |
    |---|-------|-------------|-------|-----|-----|

    Звездочки - значение игнорируется. Троеточия - и так далее. Номера
    с краю - индексы строк и столбцов. n - прогрессия нечетных чисел от
    3 до бесконечности.

    Столбец 0 - общий. Столбцы n и n+1 описывают законченный ряд
    некоторых групп.

    Если в строке в столбце n было определено название группы, то
    инициализируется новая группа, к которой будут добавлены последующие
    дисциплины, полученные из иных строк.

    Если первая группа не была инициализирована на первой же дисциплине,
    то она инициализируется с именен "UNKNOWN: "+ значение ячейки.

    Если у группы больше пяти дисциплин, то сообщается о возможности
    неправильного определения. Смотрите в пункт возвращаемого значения.

    Если у дисциплины не удалось определить время, то сообщается о
    возможности неправильного определения. Смотрите в пункт
    возвращаемого значения.

    Ячейка (1, 0) абсолютно удовледотворяет стандарту. Из ячейки (2, 0)
    не удастся получить ничего, но из ячейки (3, 0) удастся получить
    номер.

    Параметры
    ---------
    table : list
      Таблица для разбора. Должна содержать от одной пары колонок + 1.

    shape : tuple
      Размер table вида (rows, columns).

    Исключения
    ----------
    ValueError
      Размер таблицы не соответствует начальным условиям: нечетное
      колличество колонок от 3 едениц и больше.

    Возврат
    -------
    Пустой генератор
      Таблица была разобрана без каких-либо проблем.

    (...)
      Возвращаетс генератор из строк, говорящих о некритичных проблемах,
      возникших при разборе таблицы.
    """
    self.groups.clear()
    
    if shape[1] % 2 == 0:
      text="Таблица имеет четное колличество колонок."
      raise ValueError(text)

    elif shape[1] < 3:
      text="Таблица не имеет достаточного колличества колонок."
      raise ValueError(text)

    is_empty_group=False
    for offset in range(1, shape[1], 2):

      group=None
      for solid in table:

        # +1 по причине того, что конец не входит в срез.
        row=solid[:1]+solid[offset:offset+1+1]

        temp=row[1].strip().lower().replace('\n', '')

        # Group
        if GROUP_REGEX.search(temp):
          is_empty_group=False
          group_name=temp
          group=Group(group_name)
          self.groups.append(group)

        # Empty group
        elif EMPTY_GROUP_REGEX.search(row[0].strip().lower()):
          # Далее идут пустые дисциплины. Не причисляем их к предыдущей
          # группе.
          is_empty_group=True

        # Lesson
        else:
          if is_empty_group:
            continue
          if group == None:
            yield "Первая группа не была определена корректно."

            group_name="UNKNOWN: "+temp
            group=Group(group_name)
            self.groups.append(group)

          """Столбик #1: номер дисциплины и время ее начала. Разделены
          символом перехода на новую строку. Время формата «hh:mm».
          """
          if row[0].strip() == '':
            yield ( "Невозможно получить номер и время урока из пустой "
                  + "ячейки в группе '"+group_name+"'.")
            number='#'
            time=(0, 0)
          else:
            match=NUM_TIME_REGEX.search(row[0].strip())
            if match == None:
              try:
                number=str(int(row[0].strip()))
              except:
                number='#'
              if number=='#':
                yield ( "Не удалось получить номер дисциплины и время ее "
                      + "начала для группы '"+group_name+"': "
                      + "некорректный формат '"+row[0].strip()+"'.")
              else:
                yield ( "Не удалось получить время начала дисциплины для "
                      + "группы '"+group_name+"': некорректный формат "
                      + "'"+row[0].strip()+"'.")
              time=(0, 0)
            else:
              number=match.group(1)
              try:
                no_ws=lambda s: s.replace('\n', '').replace(' ', '')
                hour=int(no_ws(match.group(3)))
                minute=int(no_ws(match.group(4)))
                time=(hour, minute)
                del hour, minute, no_ws
              except:
                time=(-1, -1)
              if (time[0] < 0 or time[0] > 23 or time[1] < 0 or time[1] > 59):
                yield ( "Не удалось преобразовать время начала дисциплины"
                      + " для группы '"+group_name+"': "
                      + "некорректные значения.")
                time=(23, 59)
          name=row[1].strip().replace('\n', '   ')
          room=row[2].strip().replace('\n', ' ')
          group.append(number, time, name, room)
